#!/usr/bin/env python
# coding: utf-8

# ### Super D√≠gito ü§î
# 
# O super d√≠gito de um n√∫mero inteiro *x* √© obtido da seguinte forma:
# 
# - Se *x* √© composto por apenas um d√≠gito, ent√£o, esse d√≠gito √© o super d√≠gito de x.
# - Do contr√°rio, o super d√≠gito de *x* √© igual ao super d√≠gito da soma dos d√≠gitos de x.
# 
# Perceba que, enquanto n√£o chegarmos a um n√∫mero composto por apenas **um d√≠gito**, ainda n√£o encontramos o super d√≠gito de *x*.
# 
# Por exemplificar, o super d√≠gito de 9875 √©:
# 
# ```python
# super_digit(9875) = 9 + 8 + 7 + 5 = 29
# super_digit(29)   = 2 + 9 = 11
# super_digit(11)   = 1 + 1 = 2
# super_digit(2)    = 2
# ```
# 
# Portanto, no exemplo acima, se *x* for igual a 9875, o seu super d√≠gito √© igual a 2, pois calculamos o super d√≠gito da soma dos seus d√≠gitos, at√© que o resultado fosse apenas um n√∫mero de apenas **um d√≠gito**.
# 
# Sabendo disso, o seu desafio √© o seguinte:
# 
# - voc√™ ir√° receber dois n√∫meros do usu√°rio, *n* e *k*. A partir desses dois n√∫meros, voc√™ formar√° um novo n√∫mero *p*, que ser√° a concatena√ß√£o no n√∫mero *n*, *k* vezes. Por exemplo, se *n = 9875* e *k = 4*, *p = 9875 9875 9875 9875*; ou seja *p* √© 9875, 4 vezes.
# 
# - Sabendo o valor de *p*, **calcule o seu super d√≠gito por meio de uma fun√ß√£o recursiva**.
# 
# Exemplo de entrada ||| Exemplo de sa√≠da
# ------------------ ||| ----------------
# 148 3              ||| 3
# 9875 4             ||| 8
# 123 3              ||| 9

# In[ ]:


def super_dig(p):
    if p <= 9:
        return p
    else:
        p_lista = list(str(p))
        lista_numeros = [int(numero) for numero in p_lista]
        soma = 0
        for num in lista_numeros:
            soma += num
        return super_dig(soma)


# In[ ]:


n = int(input('Digite o numero n: '))
k = int(input('Digite as repeticoes k: '))


# In[ ]:


n = str(n)
p = int(n*k)


# In[ ]:


saida = super_dig(p)
print(saida)


# In[ ]:




